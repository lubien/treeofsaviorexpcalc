$(function() {
//constant exp tables DO NOT MODIFY
//source http://www.tosbase.com/game/exp-tables/
var BASETABLE = [[0,0,0],[1,1,1],[2,8,8],[3,272,280],[4,462,742],[5,702,1444],[6,990,2434],[7,1326,3760],[8,1691,5451],[9,2200,7651],[10,2640,10291],[11,3120,13411],[12,3640,17051],[13,4200,21251],[14,4800,26051],[15,5406,31457],[16,6084,37541],[17,1755,39296],[18,4510,43806],[19,7138,50944],[20,9765,60709],[21,12502,73211],[22,15288,88499],[23,18156,106655],[24,21147,127802],[25,24696,152498],[26,28014,180512],[27,31380,211892],[28,34844,246736],[29,38464,285200],[30,42174,327374],[31,46036,373410],[32,49980,423390],[33,54750,478140],[34,58950,537090],[35,63294,600384],[36,67703,668087],[37,72252,740339],[38,76941,817280],[39,81685,898965],[40,86565,985530],[41,92610,1078140],[42,97796,1175936],[43,103024,1278960],[44,108384,1387344],[45,113778,1501122],[46,119400,1620522],[47,7752,1628274],[48,19635,1647909],[49,30174,1678083],[50,40221,1718304],[51,50172,1768476],[52,59890,1828366],[53,69690,1898056],[54,79560,1977616],[55,89369,2066985],[56,100162,2167147],[57,110236,2277383],[58,120582,2397965],[59,130944,2528909],[60,141310,2670219],[61,151932,2822151],[62,162676,2984827],[63,173672,3158499],[64,185982,3344481],[65,197259,3541740],[66,208637,3750377],[67,220255,3970632],[68,231966,4202598],[69,243764,4446362],[70,255794,4702156],[71,268056,4970212],[72,282048,5252260],[73,294670,5546930],[74,307360,5854290],[75,320274,6174564],[76,333248,6507812],[77,346442,6854254],[78,359856,7214110],[79,373320,7587430],[80,389250,7976680],[81,403025,8379705],[82,417012,8796717],[83,431211,9227928],[84,445622,9673550],[85,460062,10133612],[86,474895,10608507],[87,20757,10629264],[88,52060,10681324],[89,79296,10760620],[90,104954,10865574],[91,129556,10995130],[92,153648,11148778],[93,177400,11326178],[94,200990,11527168],[95,225295,11752463],[96,248814,12001277],[97,272118,12273395],[98,295400,12568795],[99,318861,12887656],[100,342280,13229936],[101,365645,13595581],[102,389382,13984963],[103,414918,14399881],[104,438816,14838697],[105,462848,15301545],[106,487008,15788553],[107,511290,16299843],[108,535921,16835764],[109,560428,17396192],[110,585280,17981472],[111,612796,18594268],[112,637928,19232196],[113,663390,19895586],[114,688940,20584526],[115,714818,21299344],[116,740776,22040120],[117,766804,22806924],[118,793156,23600080],[119,822784,24422864],[120,849592,25272456],[121,876460,26148916],[122,903640,27052556],[123,931128,27983684],[124,958664,28942348],[125,986508,29928856],[126,1014388,30943244],[127,1046410,31989654],[128,1074700,33064354],[129,1103290,34167644],[130,1132184,35299828],[131,1161372,36461200],[132,1190580,37651780],[133,1220084,38871864],[134,1249600,40121464],[135,1283832,41405296],[136,1314000,42719296],[137,97312,42816608],[138,243312,43059920],[139,369224,43429144],[140,486600,43915744],[141,599168,44514912],[142,710648,45225560],[143,817540,46043100],[144,922676,46965776],[145,1026608,47992384],[146,1129304,49121688],[147,1231336,50353024],[148,1332352,51685376],[149,1433584,53118960],[150,1538840,54657800],[151,1639440,56297240],[152,1739864,58037104],[153,1840408,59877512],[154,1940728,61818240],[155,2041468,63859708],[156,2141940,66001648],[157,2242800,68244448],[158,2350624,70595072],[159,2452136,73047208],[160,2553976,75601184],[161,2655808,78256992],[162,2758304,81015296],[163,2860752,83876048],[164,2963496,86839544],[165,3066864,89906408],[166,3179432,93085840],[167,3283936,96369776],[168,3388320,99758096],[169,3493664,103251760],[170,3598864,106850624],[171,3705024,110555648],[172,3811376,114367024],[173,3918296,118285320],[174,4036232,122321552],[175,4144128,126465680],[176,4252560,130718240],[177,4361536,135079776],[178,4471024,139550800],[179,4581072,144131872],[180,4691216,148823088],[181,4802288,153625376],[182,4926096,158551472],[183,5038368,163589840],[184,5151152,168740992],[185,5264032,174005024],[186,5377776,179382800],[187,220800,179603600],[188,550736,180154336],[189,836336,180990672],[190,1100528,182091200],[191,1352560,183443760],[192,1595920,185039680],[193,1833296,186872976],[194,2065456,188938432],[195,2294336,191232768],[196,2519872,193752640],[197,2749328,196501968],[198,2970960,199472928],[199,3190752,202663680],[200,3409440,206073120],[201,3627056,209700176],[202,3843504,213543680],[203,4059200,217602880],[204,4274544,221877424],[205,4499744,226377168],[206,4714736,231091904],[207,4929264,236021168],[208,5143744,241164912],[209,5358192,246523104],[210,5572992,252096096],[211,5787232,257883328],[212,6002256,263885584],[213,6230768,270116352],[214,6446368,276562720],[215,6662176,283224896],[216,6878240,290103136],[217,7094560,297197696],[218,7311552,304509248],[219,7528704,312037952],[220,7746560,319784512],[221,7981408,327765920],[222,8200864,335966784],[223,8420000,344386784],[224,8640192,353026976],[225,8860992,361887968],[226,9082336,370970304],[227,9304224,380274528],[228,9526720,389801248],[229,9769600,399570848],[230,9993504,409564352],[231,10218400,419782752],[232,10443776,430226528],[233,10670144,440896672],[234,10896512,451793184],[235,11124320,462917504],[236,11375104,474292608],[237,704736,474997344],[238,1756064,476753408],[239,2657696,479411104],[240,3494048,482905152],[241,4289440,487194592],[242,5056768,492251360],[243,5802432,498053792],[244,6544320,504598112],[245,7261056,511859168],[246,7967328,519826496],[247,8664480,528490976],[248,9353952,537844928],[249,10036736,547881664],[250,10714176,558595840],[251,11387328,569983168],[252,12078400,582061568],[253,12745472,594807040],[254,13408832,608215872],[255,14070272,622286144],[256,14729024,637015168],[257,15386304,652401472],[258,16042368,668443840],[259,16696704,685140544],[260,17381696,702522240],[261,18035648,720557888],[262,18688896,739246784],[263,19341824,758588608],[264,19994304,778582912],[265,20647168,799230080],[266,21299392,820529472],[267,21952448,842481920],[268,22644928,865126848],[269,23299008,888425856],[270,23954176,912380032],[271,24609216,936989248],[272,25265344,962254592],[273,25921984,988176576],[274,26579456,1014756032],[275,27237952,1041993984],[276,27944192,1069938176],[277,28605440,1098543616],[278,29267584,1127811200],[279,29931136,1157742336],[280,30595456,1188337792],[281,31261184,1219598976],[282,31927680,1251526656],[283,32649984,1284176640],[284,33320064,1317496704],[285,33991936,1351488640],[286,34665088,1386153728],[287,852096,1387005824],[288,2121728,1389127552],[289,3209088,1392336640],[290,4215936,1396552576],[291,5180672,1401733248],[292,6103296,1407836544],[293,6998656,1414835200],[294,7873280,1422708480],[295,8729984,1431438464],[296,9572864,1441011328],[297,10403968,1451415296],[298,11224704,1462640000],[299,12055424,1474695424],[300,12860928,1487556352],[301,13660544,1501216896],[302,14453888,1515670784]];
var CLASSTABLE = [[0,0,0],[[0,0,0],[1,0,0],[2,58,58],[3,209,267],[4,386,653],[5,578,1231],[6,780,2011],[7,993,3004],[8,1213,4217],[9,1440,5657],[10,1673,7330],[11,1913,9243],[12,2156,11399],[13,2405,13804],[14,2658,16462],[15,2915,19377]],[[0,0,0],[1,0,0],[2,2724,2724],[3,9795,12519],[4,18029,30548],[5,26976,57524],[6,36459,93983],[7,46379,140362],[8,56668,197030],[9,67281,264311],[10,78181,342492],[11,89342,431834],[12,100741,532575],[13,112360,644935],[14,124182,769117],[15,136196,905313]],[[0,0,0],[1,0,0],[2,16004,16004],[3,57532,73536],[4,105896,179432],[5,158451,337883],[6,214155,552038],[7,272418,824456],[8,332856,1157312],[9,395193,1552505],[10,459220,2011725],[11,524776,2536501],[12,591731,3128232],[13,659976,3788208],[14,729420,4517628],[15,799985,5317613]],[[0,0,0],[1,0,0],[2,57976,57976],[3,208412,266388],[4,383617,650005],[5,573997,1224002],[6,775787,1999789],[7,986852,2986641],[8,1205790,4192431],[9,1431606,5624037],[10,1663550,7287587],[11,1901032,9188619],[12,2143579,11332198],[13,2390800,13722998],[14,2642365,16365363],[15,2897993,19263356]],[[0,0,0],[1,0,0],[2,245833,245833],[3,883722,1129555],[4,1626630,2756185],[5,2433890,5190075],[6,3289531,8479606],[7,4184497,12664103],[8,5112853,17776956],[9,6070368,23847324],[10,7053866,30901190],[11,8060850,38962040],[12,9089312,48051352],[13,10137584,58188936],[14,11204288,69393224],[15,12288216,81681440]],[[0,0,0],[1,0,0],[2,535630,535630],[3,1925481,2461111],[4,3544152,6005263],[5,5303036,11308299],[6,7167333,18475632],[7,9117312,27592944],[8,11140044,38732988],[9,13226312,51959300],[10,15369180,67328480],[11,17563232,84891712],[12,19804080,104695792],[13,22088096,126783888],[14,24412240,151196128],[15,26773952,177970080]],[[0,0,0],[1,0,0],[2,1647370,1647370],[3,5921956,7569326],[4,10900296,18469622],[5,16309870,34779492],[6,22043652,56823144],[7,28040952,84864096],[8,34262008,119126104],[9,40678472,159804576],[10,47269040,207073616],[11,54016992,261090608],[12,60908880,321999488],[13,67933504,389932992],[14,75081664,465014656],[15,82345216,547359872]]];
var CARDTABLE = [[0,0,0],[1,500,385],[2,2686,2668],[3,8442,6500],[4,22860,17602],[5,24571,18919],[6,60312,46440],[7,142150,109455],[8,209334,161187],[9,237943,183216],[10,541023,416587],[11,985061,756587],[12,2420348,1863667],[13,479397,369135]];
var CLASSRANKS = [1,2,3,4,5,6,7];
var CLASSLEVELS = [1,2,3,4,5,6,7,8,9,10,11,12,13,14];

//create an extender that forces writes to an observable to be numeric rounded to a configurable level of precision
//source http://knockoutjs.com/documentation/extenders.html
ko.extenders.numeric = function(target, precision) {
    //create a writable computed observable to intercept writes to our observable
    var result = ko.pureComputed({
        read: target,  //always return the original observables value
        write: function(newValue) {
            var current = target(),
                roundingMultiplier = Math.pow(10, precision),
                newValueAsNum = isNaN(newValue) ? 0 : parseFloat(+newValue),
                valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;
 
            //only write if it changed
            if (valueToWrite !== current) {
                target(valueToWrite);
            } else {
                //if the rounded value is the same, but a different value was written, force a notification for the current field
                if (newValue !== current) {
                    target.notifySubscribers(valueToWrite);
                }
            }
        }
    }).extend({ notify: 'always' });
 
    //initialize with current value to make sure it is rounded appropriately
    result(target());
 
    //return the new computed observable
    return result;
};

//character model
var Character = function(){
	var self = this;
	
	self._base 		= ko.observable(1).extend({ numeric: 0 , persist: '_base'});
	self._baseP 	= ko.observable(0).extend({ numeric: 2 , persist: '_baseP'});
	self._class 	= ko.observable(1).extend({ numeric: 0 , persist: '_class'});
	self._classP 	= ko.observable(0).extend({ numeric: 2 , persist: '_classP'});
	self._classRank	= ko.observable(1).extend({ numeric: 0 , persist: '_classRank'});
	
	//calculate the total base experience using the exp table provided;
	self._baseExp	= ko.computed(function(){
		return parseFloat(BASETABLE[self._base()][2] + (BASETABLE[parseInt(self._base()) + 1][1] * (self._baseP()/100)));
	});
	
	//calculate the total class experience using the exp table provided;
	self._classExp	= ko.computed(function(){
		return parseFloat(CLASSTABLE[self._classRank()][self._class()][2] + (CLASSTABLE[self._classRank()][parseInt(self._class()) + 1][1] * (self._classP()/100)));
	});
    
    //remove the decimal value from the experience variables for better displaying
    self._displayBaseExp	= ko.computed(function(){
		return parseInt(self._baseExp());
	});
    
    self._displayClassExp	= ko.computed(function(){
		return parseInt(self._classExp()); 
	});
}

//cards model
var Cards = function(){
	var self = this;
	
	self._card1 	= ko.observable(0).extend({ numeric: 0 , persist: '_card1'});
    self._card2 	= ko.observable(0).extend({ numeric: 0 , persist: '_card2'});
    self._card3 	= ko.observable(0).extend({ numeric: 0 , persist: '_card3'});
    self._card4 	= ko.observable(0).extend({ numeric: 0 , persist: '_card4'});
    self._card5 	= ko.observable(0).extend({ numeric: 0 , persist: '_card5'});
    self._card6 	= ko.observable(0).extend({ numeric: 0 , persist: '_card6'});
    self._card7 	= ko.observable(0).extend({ numeric: 0 , persist: '_card7'});
    self._card8 	= ko.observable(0).extend({ numeric: 0 , persist: '_card8'});
    self._card9 	= ko.observable(0).extend({ numeric: 0 , persist: '_card9'});
    self._card10 	= ko.observable(0).extend({ numeric: 0 , persist: '_card10'});
    self._card11 	= ko.observable(0).extend({ numeric: 0 , persist: '_card11'});
    self._card12 	= ko.observable(0).extend({ numeric: 0 , persist: '_card12'});
    self._card13 	= ko.observable(0).extend({ numeric: 0 , persist: '_card13'});
	
	//calculate the total avalible base experience from cards
	self._tBaseExp 	= ko.computed(function() {
		return 	parseFloat(self._card1()) * CARDTABLE[1][1] +
				parseFloat(self._card2()) * CARDTABLE[2][1] +
				parseFloat(self._card3()) * CARDTABLE[3][1] +
				parseFloat(self._card4()) * CARDTABLE[4][1] +
				parseFloat(self._card5()) * CARDTABLE[5][1] +
				parseFloat(self._card6()) * CARDTABLE[6][1] +
				parseFloat(self._card7()) * CARDTABLE[7][1] +
				parseFloat(self._card8()) * CARDTABLE[8][1] +
				parseFloat(self._card9()) * CARDTABLE[9][1] +
				parseFloat(self._card10()) * CARDTABLE[10][1] +
				parseFloat(self._card11()) * CARDTABLE[11][1] +
				parseFloat(self._card12()) * CARDTABLE[12][1] +
				parseFloat(self._card13()) * CARDTABLE[13][1]
	});
	
	//calculate the total avalible class experience from cards
	self._tClassExp	= ko.computed(function() {
		return 	parseFloat(self._card1()) * CARDTABLE[1][2] +
				parseFloat(self._card2()) * CARDTABLE[2][2] +
				parseFloat(self._card3()) * CARDTABLE[3][2] +
				parseFloat(self._card4()) * CARDTABLE[4][2] +
				parseFloat(self._card5()) * CARDTABLE[5][2] +
				parseFloat(self._card6()) * CARDTABLE[6][2] +
				parseFloat(self._card7()) * CARDTABLE[7][2] +
				parseFloat(self._card8()) * CARDTABLE[8][2] +
				parseFloat(self._card9()) * CARDTABLE[9][2] +
				parseFloat(self._card10()) * CARDTABLE[10][2] +
				parseFloat(self._card11()) * CARDTABLE[11][2] +
				parseFloat(self._card12()) * CARDTABLE[12][2] +
				parseFloat(self._card13()) * CARDTABLE[13][2]
	});
}

function AppViewModel() {
	var self = this;
	var i;
	
	self.ranks 			= CLASSRANKS;
	self.clevels 		= CLASSLEVELS;
	
	self.char 			= new Character();
	self.cards 			= new Cards();
	
	//calculate the character base experience after the cards are used
	self.newBaseExp 	= ko.computed(function(){
		return parseFloat(self.char._baseExp()) + parseFloat(self.cards._tBaseExp());
	});
	
	//calculate the character base level after the cards are used
	self.newBaseLevel 	= ko.computed(function(){
		for(i = 0; i < BASETABLE.length; i++){
			if (BASETABLE[i][2] > self.newBaseExp()){
				return i - 1;
			}
		}
		return -1;
	});
	
	//calculate the character class experience after the cards are used
	self.newClassExp	= ko.computed(function(){
		return parseFloat(self.char._classExp()) + parseFloat(self.cards._tClassExp());
	});
	
	//calculate the character class level after the cards are used
	self.newClassLevel 	= ko.computed(function(){
		for (i = 0; i < CLASSTABLE[self.char._classRank()].length; i++) {
			if (CLASSTABLE[self.char._classRank()][i][2] > self.newClassExp()){
				return i - 1;
			}
		}
		return 15;
	});
    
    //remove the decimal value from the experience variables for better displaying
    self.displayNewBaseExp 	= ko.computed(function(){
		return parseInt(self.newBaseExp());
	});
    
    self.displayNewClassExp = ko.computed(function(){
		return parseInt(self.newBaseExp());
	});
};

ko.applyBindings(new AppViewModel());


$.material.init();
    
});
